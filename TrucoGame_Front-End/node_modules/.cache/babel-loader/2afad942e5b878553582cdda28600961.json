{"ast":null,"code":"import { DirectUpload } from \"activestorage\";\nimport axios from \"axios\";\nimport { environment } from \"../environment\";\nimport { cleanSessionToken, cleanSessionUser, updateSessionToken, updateSessionUser } from \"./userStore\";\nimport request from \"axios\";\nexport async function login(params) {\n  const res = (await axios.post(\"/auth/login?\", params)).data;\n\n  if (res.status == 200) {\n    updateSessionToken(res.data.token);\n    updateSessionUser(res.data.user);\n    axios.defaults.headers.common['Authorization'] = getCurrentToken();\n  }\n\n  return res;\n}\nexport async function register(params) {\n  var rtaRegister = undefined;\n\n  if (params.avatar != null) {\n    //si el usuario cargó una imagen            \n    const upload = new DirectUpload(params.avatar, environment.backendUrl + \"/rails/active_storage/direct_uploads\");\n    upload.create(async (error, blob) => {\n      if (error) {\n        rtaRegister = {\n          status: 400,\n          data: {\n            message: \"Error al cargar el avatar en el servidor\"\n          }\n        };\n      } else {\n        try {\n          rtaRegister = (await axios.post(\"/users?\", {\n            user: {\n              username: params.username,\n              password: params.password,\n              avatar: blob.signed_id\n            }\n          })).data;\n        } catch (error) {\n          if (request.isAxiosError(error)) {\n            rtaRegister = {\n              status: 400,\n              data: {\n                message: error.message\n              }\n            };\n          }\n        }\n      }\n    });\n\n    while (rtaRegister === undefined) {\n      await new Promise(r => setTimeout(r, 50));\n    }\n\n    console.log(\"despues de esperar\", rtaRegister);\n    return rtaRegister;\n  } else {\n    rtaRegister = (await axios.post(\"/users?\", {\n      user: {\n        username: params.username,\n        password: params.password\n      }\n    })).data;\n    return rtaRegister;\n  }\n}\nexport async function update(params) {\n  var _rtaUpdate;\n\n  var rtaUpdate = undefined;\n\n  if (params.avatar != null) {\n    const upload = new DirectUpload(params.avatar, environment.backendUrl + \"/rails/active_storage/direct_uploads\");\n    upload.create(async (error, blob) => {\n      if (error) {\n        rtaUpdate = {\n          status: 400,\n          data: {\n            message: \"Error al cargar el avatar en el servidor\"\n          }\n        };\n      } else {\n        try {\n          rtaUpdate = (await axios.put(\"/user\", {\n            user: {\n              username: params.username,\n              password: params.password,\n              avatar: blob.signed_id\n            }\n          })).data;\n        } catch (error) {\n          if (request.isAxiosError(error)) {\n            rtaUpdate = {\n              status: 400,\n              data: {\n                message: error.message\n              }\n            };\n          }\n        }\n      }\n    });\n\n    while (rtaUpdate === undefined) {\n      await new Promise(r => setTimeout(r, 50));\n    }\n\n    console.log(\"despues de esperar\", rtaUpdate);\n  } else {\n    rtaUpdate = (await axios.put(\"/user\", {\n      user: {\n        username: params.username,\n        password: params.password\n      }\n    })).data;\n  }\n\n  if (((_rtaUpdate = rtaUpdate) === null || _rtaUpdate === void 0 ? void 0 : _rtaUpdate.status) == 200) {\n    let userData = rtaUpdate.data;\n    updateSessionUser(userData.user);\n  }\n\n  return rtaUpdate;\n}\nexport async function logout() {\n  const resLogout = (await axios.post(\"/auth/logout?\")).data;\n  console.log(JSON.stringify(resLogout));\n\n  if (resLogout.status == 200) {\n    cleanSessionToken();\n    cleanSessionUser();\n    axios.defaults.headers.common.Authorization = \"\";\n  }\n\n  return resLogout;\n}\nexport async function destroy() {\n  const resDestroy = (await axios.delete(\"/user\")).data;\n\n  if (resDestroy.status == 200) {\n    cleanSessionToken();\n    cleanSessionUser();\n    axios.defaults.headers.common.Authorization = \"\";\n  }\n\n  return resDestroy;\n}\nexport function getCurrentToken() {\n  const result = localStorage.getItem(\"token\");\n  return result ? result : undefined;\n}\nexport function getCurrentUser() {\n  let result = localStorage.getItem(\"user\");\n  return result != \"undefined\" ? JSON.parse(result) : undefined;\n}","map":{"version":3,"names":["DirectUpload","axios","environment","cleanSessionToken","cleanSessionUser","updateSessionToken","updateSessionUser","request","login","params","res","post","data","status","token","user","defaults","headers","common","getCurrentToken","register","rtaRegister","undefined","avatar","upload","backendUrl","create","error","blob","message","username","password","signed_id","isAxiosError","Promise","r","setTimeout","console","log","update","rtaUpdate","put","userData","logout","resLogout","JSON","stringify","Authorization","destroy","resDestroy","delete","result","localStorage","getItem","getCurrentUser","parse"],"sources":["C:/Users/acapo/Desktop/Programacion Avanzada/Proyecto final - Truco/CardGame_Front-End/src/User/userService.ts"],"sourcesContent":["import { Blob, DirectUpload } from \"activestorage\"\r\nimport axios from \"axios\"\r\nimport { reduce } from \"rxjs\"\r\nimport { environment } from \"../environment\"\r\nimport { cleanSessionToken, cleanSessionUser, updateSessionToken, updateSessionUser } from \"./userStore\"\r\nimport request from \"axios\"\r\n\r\n\r\nexport interface Data {\r\n  status: number,\r\n  data: RequestError | UserData\r\n}\r\n\r\nexport interface RequestError {\r\n  message: string\r\n}\r\n\r\nexport interface UserData {\r\n  token: string,\r\n  user: User\r\n}\r\n\r\n\r\nexport interface User {\r\n  id: number,\r\n  username: string,\r\n  avatar: string\r\n}\r\n\r\nexport async function login(params: {\r\n  username: string\r\n  password: string\r\n}): Promise<Data> {\r\n  const res = (\r\n    await axios.post(\"/auth/login?\", params)\r\n  ).data as Data\r\n  if (res.status == 200) {\r\n    updateSessionToken((<UserData>res.data).token)\r\n    updateSessionUser((<UserData>res.data).user)\r\n    axios.defaults.headers.common['Authorization'] = getCurrentToken()\r\n  }\r\n\r\n  return res\r\n}\r\n\r\nexport async function register(params: {\r\n  username: string,\r\n  password: string,\r\n  avatar: File | null\r\n}): Promise<Data> {\r\n\r\n  var rtaRegister: Data | undefined = undefined\r\n  \r\n  if (params.avatar != null) { //si el usuario cargó una imagen            \r\n    const upload = new DirectUpload(params.avatar, environment.backendUrl + \"/rails/active_storage/direct_uploads\")\r\n    upload.create(async (error, blob) => {\r\n      if (error) {\r\n        rtaRegister = { status: 400, data: { message: \"Error al cargar el avatar en el servidor\" } }\r\n      } else {\r\n        try {\r\n          rtaRegister = (\r\n            await axios.post(\"/users?\", { user: { username: params.username, password: params.password, avatar: blob.signed_id } })\r\n          ).data as Data          \r\n        } catch (error: unknown) {\r\n          if (request.isAxiosError(error)) {\r\n            rtaRegister = { status: 400, data: { message: error.message } }            \r\n          }\r\n        }\r\n      }\r\n    })\r\n    while (rtaRegister === undefined){\r\n      await new Promise(r => setTimeout(r, 50));\r\n    }\r\n    console.log(\"despues de esperar\",rtaRegister)\r\n    return (rtaRegister as unknown) as Data\r\n  } else {\r\n    rtaRegister = (\r\n      await axios.post(\"/users?\", { user: { username: params.username, password: params.password } })\r\n    ).data as Data\r\n    return rtaRegister\r\n  }\r\n}\r\n\r\nexport async function update(params: {\r\n  username: string | null,\r\n  password: string | null,\r\n  avatar: File | null\r\n}): Promise<Data> {\r\n  var rtaUpdate: Data | undefined = undefined\r\n  if (params.avatar != null) {\r\n    const upload = new DirectUpload(params.avatar, environment.backendUrl + \"/rails/active_storage/direct_uploads\")\r\n    upload.create(async (error, blob) => {\r\n      if (error) {\r\n        rtaUpdate = { status: 400, data: { message: \"Error al cargar el avatar en el servidor\" } }\r\n      } else {\r\n        try {\r\n          rtaUpdate = (\r\n            await axios.put(\"/user\", { user: { username: params.username, password: params.password, avatar: blob.signed_id } })\r\n          ).data as Data          \r\n        } catch (error: unknown) {\r\n          if (request.isAxiosError(error)) {\r\n            rtaUpdate = { status: 400, data: { message: error.message } }            \r\n          }\r\n        }\r\n      }\r\n    })\r\n    \r\n    while (rtaUpdate === undefined){\r\n      await new Promise(r => setTimeout(r, 50));\r\n    }    \r\n    \r\n    console.log(\"despues de esperar\",rtaUpdate)\r\n  }else {      \r\n    rtaUpdate = (\r\n      await axios.put(\"/user\", { user: { username: params.username, password: params.password} })\r\n    ).data as Data            \r\n  }\r\n  if (rtaUpdate?.status == 200) {    \r\n    let userData = <UserData>rtaUpdate.data\r\n    updateSessionUser(userData.user)\r\n  }\r\n  return rtaUpdate as unknown as Data\r\n}\r\n\r\nexport async function logout():Promise<Data> {\r\n  const resLogout = (\r\n    await axios.post(\"/auth/logout?\")\r\n  ).data as Data\r\n  console.log(JSON.stringify(resLogout as any))\r\n  if (resLogout.status == 200){\r\n    cleanSessionToken()\r\n    cleanSessionUser()\r\n    axios.defaults.headers.common.Authorization = \"\"\r\n  }\r\n  return resLogout    \r\n}\r\n\r\nexport async function destroy():Promise<Data>{\r\n  const resDestroy = (\r\n    await axios.delete(\"/user\")\r\n  ).data as Data\r\n  if (resDestroy.status == 200){\r\n    cleanSessionToken()\r\n    cleanSessionUser()\r\n    axios.defaults.headers.common.Authorization = \"\"\r\n  }\r\n  return resDestroy\r\n}\r\n\r\n\r\nexport function getCurrentToken(): string | undefined {\r\n  const result = localStorage.getItem(\"token\")\r\n  return result ? result : undefined\r\n}\r\n\r\nexport function getCurrentUser(): User | undefined {\r\n  let result = localStorage.getItem(\"user\") as string\r\n  return result != \"undefined\" ? JSON.parse(result) as User : undefined\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}